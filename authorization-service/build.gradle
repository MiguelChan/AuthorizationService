plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.flywaydb.flyway' version '7.7.2'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.mchan'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
    implementation 'commons-validator:commons-validator:1.4.1'
    implementation project(':authorization-service-shared-lib')

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.github.benas:random-beans:3.7.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

flyway {
    //  Dev Config
//    url = 'jdbc:postgresql://localhost:5432/postgres'
//    user = 'flyway_user'
//    password = 'flyway-user-password'

    // To use when in Cloud Provider.
    url = System.getenv().get('JDBC_DATABASE_URL')
    user = System.getenv().get('JDBC_DATABASE_USERNAME')
    password = System.getenv().get('JDBC_DATABASE_PASSWORD')

    schemas = ['auth_db']
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

tasks.register('checkstyle') {
    dependsOn tasks.checkstyleMain
    dependsOn tasks.checkstyleTest
}

tasks.getByName('checkstyle').outputs.upToDateWhen { false }

tasks.register('release') {
    dependsOn tasks.checkstyle
    dependsOn tasks.test
    dependsOn tasks.build
    finalizedBy 'copyJar'
}

tasks.register('copyJar', Copy) {
    from "$buildDir/libs/authorization-service-0.0.1-SNAPSHOT.jar"
    into layout.projectDirectory.dir('../build')
}

jacoco {
    toolVersion = '0.8.7'
    reportsDirectory.set(file("$buildDir/jacoco"))
}

test.outputs.upToDateWhen { false }
jacocoTestReport.outputs.upToDateWhen { false }

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/models/**',
                    '**/exceptions/**',
                    '**/dto/**',
                    '**/dao/entities/**',
                    '**/spring/config/**',
                    '**/AuthorizationServiceApplication*',
                    '**/EntitiesAuthenticationToken*',
                    '**/WebSecurityConfig*'
            ])
        }))
    }
}
